#!/bin/bash

if [[ -n "${__ETC_USERFLOW_IN__}" ]]; then
	return
else
	__ETC_USERFLOW_IN__="$0"
fi

readonly -A userflow_group_high=(
	[limit_up]=20
	[limit_down]=50
	[limit_conn]=50
	[limit_timeout]=900
)

readonly -A userflow_group_low=(
	[limit_up]=20
	[limit_down]=20
	[limit_conn]=50
	[limit_timeout]=900
)

#
# ip is the key
#
declare -A userflow_mac
declare -A userflow_group
declare -A userflow_limit_up
declare -A userflow_limit_down
declare -A userflow_limit_conn
declare -A userflow_limit_timeout

declare -A userflow_stat_up
declare -A userflow_stat_down
declare -A userflow_stat_conn
declare -A userflow_stat_time

#
# mac is the key
#
declare -A userflow_arp

#
#$1:user
#$2:field
#$3:value...
#
set_userflow() {
	local user="$1"
	local field="$2"; shift 2
	local value="$*"

	eval "userflow_${field}[${user}]=\"${value}\""
}

#
#$1:user
#$2:field
#
get_userflow() {
	local user="$1"
	local field="$2"

	eval "echo \${userflow_${field}[${user}]}"
}

#
#$1:user
#$2:field
#
del_userflow() {
	local user="$1"
	local field="$2"

	eval "unset userflow_${field}[${user}]"
}

#
#$1:user
#$2:group
#
set_userflow_bygroup() {
	local user="$1"
	local group="$2"

	set_userflow ${user} group ${group}
	set_userflow ${user} limit_up $(eval "\${userflow_group_${group}[limit_up]}")
	set_userflow ${user} limit_down $(eval "\${userflow_group_${group}[limit_down]}")
	set_userflow ${user} limit_conn $(eval "\${userflow_group_${group}[limit_conn]}")
	set_userflow ${user} limit_timeout $(eval "\${userflow_group_${group}[limit_timeout]}")
}

#
#$1:user
#$2:group
#
userflow_create() {
	local user="$1"
	local group="$2"

	set_userflow_bygroup ${user} ${group}

	set_userflow ${user} stat_up 0
	set_userflow ${user} stat_down 0
	set_userflow ${user} stat_conn 0
	set_userflow ${user} stat_time 0
}

#
#$1:user
#
userflow_delete() {
	local user="$1"

	del_userflow ${user} group

	del_userflow ${user} limit_up
	del_userflow ${user} limit_down
	del_userflow ${user} limit_conn
	del_userflow ${user} limit_timeout

	del_userflow ${user} stat_up
	del_userflow ${user} stat_down
	del_userflow ${user} stat_conn
	del_userflow ${user} stat_time
}

#
#$1:user
#$2:new group
#
userflow_change_group() {
	local user="$1"
	local new="$2"
	local old=${userflow_group[${user}]}

	if [[ "${old}" == "${new}" ]]; then
		return
	fi

	set_userflow_bygroup ${user} ${new}
}

#
#$1:prefix
#$2:begin
#$3:end
#$4:group
#[$5:suffix]
#
userflow_init() {
	local prefix="$1"
	local begin="$2"
	local end="$3"
	local group="$4"
	local suffix="$5"
	local user

	local i
	for ((i=begin; i<=end; i++)); do
		if [[ -z "${suffix}" ]]; then
			user=${prefix}.${i}
		else
			user=${prefix}.${i}.${suffix}
		fi

		userflow_create ${user} ${group}
	done
}
