#!/bin/bash

if [[ -n "${__UPGRADE_DIR_IN__}" ]]; then
	return
else
	__UPGRADE_DIR_IN__="$0"
fi

. ${__ROOTFS__}/etc/utils/utils.in

readonly file_ap=sysupgrade.bin
readonly file_ap_long=openwrt-ar71xx-generic-db120-squashfs-sysupgrade.bin
readonly file_ap_boot=u-boot.bin
readonly file_boot=fastboot-burn.bin
readonly file_kernel=hi_kernel.bin
readonly file_pqparam=pq_param_hi3718cv100.bin

#
#$1:min_size
#$2:max_size
#
get_dev_bysize() {
	local min_size=$1
	local max_size=$2

	local a b size name
	while read a b size name; do
		if ((size>=min_size && size<=max_size)); then
			echo "/dev/${name}"

			return
		fi
	done < <(grep sd[a-z]1 /proc/partitions)
}

#
#$1:dev_deft
#$2:min_size
#$3:max_size
#
get_dev_bydeft() {
	local dev_deft=$1
	local min_size=$2
	local max_size=$3

	local dev=$(get_dev_bysize ${min_size} ${max_size})
	if [[ -n "${dev}" ]]; then
		echo ${dev}
	else
		echo ${dev_deft}
	fi
}

get_dev_hd() {
	#
	# 100G to 1T
	#	100G: 100*1024*1024=104857600 (K)
	# 	1T:   1024*1024*1024=1073741824 (K)
	#
	dev_hd=$(get_dev_bydeft /dev/sda1 104857600 1073741824)

	echo ${dev_hd}
}
dev_hd=$(get_dev_hd)

get_dev_usb() {
	#
	# 100G to 1T
	#	1G: 	1024*1024=1048576 (K)
	# 	32G: 	32*1024*1024=33554432 (K)
	#
	dev_usb=$(get_dev_bydeft /dev/sdb1 1048576 33554432)

	echo ${dev_usb}
}
dev_usb=$(get_dev_usb)

readonly dev_sd=/dev/mmcblk1p1

#
# /dev/mmcblk0pXXX
#
readonly dev_rootfs0=/dev/mmcblk0p7
readonly dev_rootfs1=/dev/mmcblk0p8
readonly dev_rootfs2=/dev/mmcblk0p9
readonly dev_rootfs_data=/dev/mmcblk0p10

readonly -A dev_emmc_bin=(
	[fastboot-burn.bin]=/dev/mmcblk0p1
	[pq_param_hi3718cv100.bin]=/dev/mmcblk0p4
	[hi_kernel.bin]=/dev/mmcblk0p6
)

readonly -A DEV_ROOTFS=(
	["/dev/mmcblk0p7"]=0
	["/dev/mmcblk0p8"]=1
	["/dev/mmcblk0p9"]=2
)

#
# base dir
#
readonly dir_flash=/mnt/flash
readonly dir_sd=/mnt/sd
readonly dir_hd=/mnt/hd
readonly dir_usb=/mnt/usb
readonly dir_tftp=/tmp/tftp
readonly dir_status=/tmp/status
readonly dir_plt=/tmp/plt
readonly dir_plt_syslog=${dir_plt}/syslog
readonly dir_website=${dir_hd}/website
readonly dir_website_upgrade=${dir_hd}/website_upgrade
readonly dir_website_config=${dir_hd}/website_config
#
# for third-part(custom dir)
#
readonly dir_custom=${dir_hd}/custom
readonly dir_custom_zjhn=${dir_custom}/zjhn
readonly dir_custom_script=${dir_custom_zjhn}/script
readonly file_custom_init=${dir_custom_script}/init.sh

readonly dir_tmp_custom=tmp/custom
readonly dir_tmp_custom_zjhn=${dir_tmp_custom}/zjhn

readonly file_plt_cache=${dir_plt}/.plt.cache
readonly file_website_config=${dir_website_config}/website.conf

readonly file_status_3g=${dir_status}/3g
readonly file_status_5g=${dir_status}/5g

readonly LINK_UP=up
readonly LINK_DOWN=down

init_dir_status() {
	set_file_value ${file_status_3g} ${LINK_DOWN}
	set_file_value ${file_status_5g} ${LINK_DOWN}
}

#
# usb dir
#
readonly dir_usb_upgrade=${dir_usb}/upgrade
readonly dir_usb_upgrade_rootfs=${dir_usb_upgrade}/rootfs
readonly dir_usb_upgrade_rootfs_data=${dir_usb_upgrade}/rootfs_data
readonly dir_usb_upgrade_website=${dir_usb_upgrade}/website

#
# partition dir
#
readonly dir_rootfs0=${dir_flash}/rootfs0
readonly dir_rootfs1=${dir_flash}/rootfs1
readonly dir_rootfs2=${dir_flash}/rootfs2
readonly dir_rootfs_data=${dir_flash}/rootfs_data

#
#$1:idx
#
rootfs_dir() {
	local idx="$1"
	local dir=dir_rootfs${idx}

	echo "${!dir}"
}

readonly file_rootfs_current=/tmp/.rootfs_current
#
# get current rootfs's idx
#
rootfs_current() {
	#
	# get from cache
	#
	local idx=$(getfilevalue ${file_rootfs_current} "")
	if [[ -n "${idx}" ]]; then
		echo ${idx}

		return
	fi

	#
	# get from /proc/cmdline
	#
	local dev_name=$(cat /proc/cmdline | sed 's# #\n#g' | grep root= | awk -F '=' '{print $2}')
	idx=${DEV_ROOTFS[${dev_name}]}
	if [[ -z "${dev_name}" || -z "${idx}" ]]; then
		#
		# error, bad cmdline
		#
		echo 0

		return ${e_noexist}
	else
		#
		# save to cache
		#
		echo ${idx}

		set_file_value ${file_rootfs_current} ${idx}
	fi
}

#
# get buddy rootfs's idx
#[$1:idx]
#
# rootfs_buddy ==> rootfs_current's buddy
# rootfs_buddy 1 ==> rootfs1's buddy ==>2
# rootfs_buddy 2 ==> rootfs2's buddy ==>1
#
rootfs_buddy() {
	local idx=$1; idx=${idx:-$(rootfs_current)}

	case ${idx} in
	0)
		echo 1

		return ${e_inval}
		;;
	1)
		echo 2
		;;
	2)
		echo 1
		;;
	*)
		echo 1

		return ${e_inval}
		;;
	esac
}

#
#don't remove it
#
#readonly link_hd=/hd
#readonly link_sd=/sd
#readonly link_usb=/usb
#readonly link_rootfs0=/rootfs0
#readonly link_rootfs1=/rootfs1
#readonly link_rootfs2=/rootfs2
#readonly link_buddy=/buddy
#readonly link_rootfs_data=/data

readonly delay_mount_retry=1

#
#$1:dev
#
mount_check() {
	local dev=$1
	local name=$(basename ${dev})

	if [[ -z "$(cat /proc/partitions | grep ${name})" ]]; then
		#
		# if dev no exist, exit
		#
		echo "${dev} not exist"

		return ${e_noexist}
	elif [ -n "$(mount | grep ${dev})" ]; then
		#
		# if have mounted, do nothing
		#
		echo "${dev} have mounted"
	fi
}

#
#$1:dev name
#$2:dir name
#
do_mkfs() {
	local dev="$1"
	local dir="$2"

	do_with_cb echo_logger "mkfs" \
		"mkfs.ext4 ${dev}" || return $?
}

#
#$1:dev name
#$2:dir name
#[$3:opt]
#
do_mount_one() {
	local dev="$1"
	local dir="$2"; shift 2
	local opt="$*"
	local opt_fixed="-t ext4 -o noatime,nodiratime"

	mount_check ${dev} || return $?

	do_with_cb echo_logger "mount" \
		"mount ${opt} ${opt_fixed} ${dev} ${dir}" || return $?
}

#
#$1:dev name
#$2:dir name
#$3:retry times
#[$4:option]
#
do_mount() {
	local dev="$1"
	local dir="$2"
	local retry="$3"; shift 3
	local opt="$*"

	local err=0
	local times=0
	for ((; times < retry; times++)); do
		do_mount_one ${dev} ${dir} ${opt}; err=$?
		if ((0==err)); then
			return
		fi

		sleep ${delay_mount_retry}
	done

	return ${err}
}

#
#$1:dev/dir
#
do_umount() {
	local dev="$1"

	if [[ -z "$(cat /proc/partitions | grep $(basename ${dev}))" ]]; then
		return
	elif [[ -z "$(mount | grep ${dev})" ]]; then
		return
	else
		do_with_cb :logger "umount" \
			"umount -r ${dev}" || return $?
	fi
}

init_dev_sd() {
	local ptest=${dir_sd}/product_test.sh
	if [[ -x "${ptest}" ]]; then
		echo_logger "mount" \
			"found and exec ${ptest}"

		${ptest}
	fi
}

mount_sd() {
	do_mount ${dev_sd} ${dir_sd} 3

	init_dev_sd
}

umount_sd() {
	do_umount ${dev_sd}
}

init_dev_hd() {
	if [[ -d "${dir_website}" ]]; then
		chmod -R 777 ${dir_website}
	fi

	setup_dir_with_prefix dir_ ${dir_hd}

	usr/sbin/sysled sata on
}

mount_hd() {
	do_mount ${dev_hd} ${dir_hd} 5 || return $?

	init_dev_hd
}

umount_hd() {
	do_umount ${dev_hd}
}

init_dev_usb() {
	do_nothing
}

mount_usb() {
	do_mount ${dev_usb} ${dir_usb} 3

	init_dev_usb
}

umount_usb() {
	do_umount ${dev_usb}
}


#
#$1:dir/dev
#$2:ro|rw
#
do_remount() {
	local dir=$1
	local opt=$2

	do_with_cb :logger "remount" \
		"mount -o ${opt},remount ${dir} &>/dev/null" || return $?
}

#
#$1:dir/dev
#
remount_ro() {
	local dir=$1

	do_remount ${dir} 'ro' || return #?
}

#
#$1:dir/dev
#
remount_rw() {
	local dir=$1

	do_remount ${dir} 'rw' || return $?
}

#
#$1:idx
#
remount_rootfs_ro() {
	local idx=$1
	local dir=dir_rootfs${idx}

	remount_ro ${!dir} || return $?
}

#
#$1:idx
#
remount_rootfs_rw() {
	local idx=$1
	local dir=dir_rootfs${idx}

	remount_rw ${!dir} || return $?
}

init_dev_rootfs() {
	do_nothing
}

mount_rootfs() {
#	do_mount ${dev_rootfs0} ${dir_rootfs0} 3 '-r'
#	do_mount ${dev_rootfs1} ${dir_rootfs1} 3 '-r'
#	do_mount ${dev_rootfs2} ${dir_rootfs2} 3 '-r'
	do_mount ${dev_rootfs0} ${dir_rootfs0} 3
	do_mount ${dev_rootfs1} ${dir_rootfs1} 3
	do_mount ${dev_rootfs2} ${dir_rootfs2} 3

	init_dev_rootfs
}

umount_rootfs() {
	do_umount ${dev_rootfs2}
	do_umount ${dev_rootfs1}
	do_umount ${dev_rootfs0}
}

#
# for self big app
#
readonly dir_app=${dir_rootfs_data}/app
readonly dir_app_bin=${dir_app}/bin
readonly dir_app_etc=${dir_app}/etc
readonly dir_app_lib=${dir_app}/lib
readonly dir_app_mnt=${dir_app}/mnt
readonly dir_app_opt=${dir_app}/opt
readonly dir_app_usr=${dir_app}/usr
readonly dir_app_usr_bin=${dir_app_usr}/bin
readonly dir_app_usr_sbin=${dir_app_usr}/sbin
readonly dir_app_usr_local=${dir_app_usr}/local
readonly dir_app_sbin=${dir_app}/sbin

#
# for rootfsX config
#
readonly dir_data0=${dir_rootfs_data}/data0
readonly dir_data1=${dir_rootfs_data}/data1
readonly dir_data2=${dir_rootfs_data}/data2

#
# for all rootfs config
#
readonly dir_config=${dir_rootfs_data}/config
readonly dir_config_nginx=${dir_config}/nginx
readonly dir_config_php=${dir_config}/php

init_dir_config() {
	do_nothing
}

#
# backup dir
#
readonly dir_backup=${dir_rootfs_data}/backup
readonly dir_backup_log=${dir_backup}/log

#
# version(whole/patch) dir
#
readonly dir_version=${dir_rootfs_data}/version
readonly dir_ap_version=${dir_version}/ap
readonly dir_md_version=${dir_version}/md

#
# rsync dir
#
readonly dir_rsync=${dir_rootfs_data}/rsync
readonly dir_ap_rsync=${dir_rsync}/ap
readonly dir_md_rsync=${dir_rsync}/md

#
# opt dir
#
readonly dir_opt=${dir_rootfs_data}/opt

readonly dir_opt_log=${dir_opt}/log
readonly dir_opt_log_gps=${dir_opt_log}/gps

readonly dir_opt_log_dev=${dir_opt_log}/dev
readonly dir_opt_log_dev_info=${dir_opt_log_dev}/info
readonly dir_opt_log_dev_monitor=${dir_opt_log_dev}/monitor

readonly dir_opt_log_vcc=${dir_opt_log}/vcc
readonly dir_opt_log_onoff=${dir_opt_log}/onoff

readonly dir_opt_log_drop=${dir_opt_log}/drop
readonly dir_opt_log_drop_wifi=${dir_opt_log_drop}/wifi
readonly dir_opt_log_drop_3g=${dir_opt_log_drop}/3g
readonly dir_opt_log_drop_gps=${dir_opt_log_drop}/gps

readonly dir_opt_log_flow=${dir_opt_log}/flow
readonly dir_opt_log_flow_user=${dir_opt_log_flow}/user
readonly dir_opt_log_flow_3g=${dir_opt_log_flow}/3g

readonly dir_opt_log_nginx=${dir_opt_log}/nginx
readonly dir_opt_log_nginx_error=${dir_opt_log_nginx}/error
readonly dir_opt_log_nginx_access=${dir_opt_log_nginx}/access
readonly file_nginx_access_log=${dir_opt_log_nginx_access}/nginx.log
readonly file_nginx_error_log=${dir_opt_log_nginx_error}/nginx.log

readonly dir_opt_log_squid=${dir_opt_log}/squid
readonly dir_opt_log_squid_error=${dir_opt_log_squid}/error
readonly dir_opt_log_squid_access=${dir_opt_log_squid}/access
readonly file_squid_access_log=${dir_opt_log_squid_access}/squid.log
readonly file_squid_error_log=${dir_opt_log_squid_error}/squid.log

readonly dir_opt_log_php=${dir_opt_log}/php
readonly dir_opt_log_phpfpm_error=${dir_opt_log_php}/error

readonly dir_opt_log_upgrade=${dir_opt_log}/upgrade
readonly dir_opt_log_upgrade_content=${dir_opt_log_upgrade}/content
readonly dir_opt_log_upgrade_system=${dir_opt_log_upgrade}/system

readonly dir_opt_log_usr=${dir_opt_log}/usr
readonly dir_opt_log_auth=${dir_opt_log}/auth

readonly dir_opt_log_sys=${dir_opt_log}/sys
readonly dir_opt_log_sys_md=${dir_opt_log_sys}/md
readonly dir_opt_log_sys_md_init=${dir_opt_log_sys_md}/init
readonly dir_opt_log_sys_md_klog=${dir_opt_log_sys_md}/klog
readonly dir_opt_log_sys_md_ulog=${dir_opt_log_sys_md}/ulog
readonly dir_opt_log_sys_ap=${dir_opt_log_sys}/ap
readonly dir_opt_log_sys_ap_init=${dir_opt_log_sys_ap}/init
readonly dir_opt_log_sys_ap_klog=${dir_opt_log_sys_ap}/klog
readonly dir_opt_log_sys_ap_ulog=${dir_opt_log_sys_ap}/ulog

readonly dir_opt_data=${dir_opt}/data
readonly dir_opt_data_gps=${dir_opt_data}/gps
readonly dir_opt_data_3g=${dir_opt_data}/3g

readonly file_md_ulog=${dir_opt_log_sys_md_ulog}/messages

#
# tftp dir
#
readonly dir_tftp_log=${dir_tftp}/log
readonly dir_tftp_log_gps=${dir_tftp_log}/gps
readonly dir_tftp_log_usr=${dir_tftp_log}/usr
readonly dir_tftp_log_auth=${dir_tftp_log}/auth
readonly dir_tftp_log_sys=${dir_tftp_log}/sys
readonly dir_tftp_log_sys_md=${dir_tftp_log_sys}/md
readonly dir_tftp_log_sys_md_init=${dir_tftp_log_sys_md}/init
readonly dir_tftp_log_sys_md_klog=${dir_tftp_log_sys_md}/klog
readonly dir_tftp_log_sys_md_ulog=${dir_tftp_log_sys_md}/ulog
readonly dir_tftp_log_sys_ap=${dir_tftp_log_sys}/ap
readonly dir_tftp_log_sys_ap_init=${dir_tftp_log_sys_ap}/init
readonly dir_tftp_log_sys_ap_klog=${dir_tftp_log_sys_ap}/klog
readonly dir_tftp_log_sys_ap_ulog=${dir_tftp_log_sys_ap}/ulog

readonly dir_tftp_data=${dir_tftp}/data
readonly dir_tftp_data_gps=${dir_tftp_data}/gps
readonly dir_tftp_data_3g=${dir_tftp_data}/3g

readonly dir_tftp_version=${dir_tftp}/version

init_dir_tftp() {
	#
	# link ap boot
	#
	LN_FILE ${dir_rootfs0}/image/${file_ap_boot} ${dir_tftp}/${file_ap_boot}
	#
	# link ap file(for ap super recover)
	#
	LN_FILE ${dir_rootfs0}/image/${file_ap} ${dir_tftp}/${file_ap_long}
	#
	# link ap file(for ap upgrade)
	#
	LN_FILE ${__ROOTFS__}/image/${file_ap} ${dir_tftp_version}/${file_ap}
}

#
# opt dir ==> tftp dir
#
opt2tftp() {
	#
	# convert opt dir to tftp dir
	# 	${dir_opt} and ${dir_tftp} have same sub dir
	#
	local opt
	for opt in $(find ${dir_opt} -type d); do
		local dir=$(sed "s#${dir_opt}#${dir_tftp}#" <<< ${opt})

		mkdir -p ${dir}
	done
}

setup_data_dir() {
	setup_dir_with_prefix dir_ ${dir_rootfs_data}
}

setup_tmp_dir() {
	setup_dir_with_prefix dir_ /tmp
	opt2tftp
}

init_log() {
	local now=$(getnow)
	local file

	#
	# save md init info
	#
	file=${dir_opt_log_sys_md_init}/${now}
	dmesg > ${file}; fsync ${file}

	#
	# start syslogd, log at rootfs_data
	#	Max size (1024KB) before rotate
	#
	file=${dir_opt_log_sys_md_ulog}/${now}; touch ${file}
	rm -f ${file_md_ulog}
	LN_FILE ${file} ${file_md_ulog}
	syslogd -s 1024 -O ${file}

	#
	# todo: how to save /proc/kmsg
	#
}

init_dev_rootfs_data() {
	setup_data_dir
	init_log
	init_dir_config
}

init_dev_tmp() {
	setup_tmp_dir
	init_dir_tftp
	init_dir_status
}

#
#$1:idx
#
mount_rootfs_data() {
	local err=0

	do_mount ${dev_rootfs_data} ${dir_rootfs_data} 5 || {
		return $?
	}

	init_dev_rootfs_data
	init_dev_tmp
}

umount_rootfs_data() {
	do_umount ${dev_rootfs_data}
}

mount_all() {
	mount_rootfs
	mount_rootfs_data

	echo "wait for sd ..."; sleep 1
	mount_sd

	echo "wait for hd ..."; sleep 1
	mount_hd

	echo "wait for usb ..."; sleep 1
	mount_usb
}

umount_self() {
	umount -a
}

umount_others() {
	umount_hd
	umount_sd
	umount_rootfs_data
	umount_rootfs
}

umount_all() {
	umount_usb
	umount_others

	umount_self
}
