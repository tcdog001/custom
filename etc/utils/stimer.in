#!/bin/bash

if [[ -n "${__UTILS_STIMER_IN__}" ]]; then
	return
else
	__UTILS_STIMER_IN__="$0"
fi

readonly dir_stimer=/etc/stimer
#
# tmp stimer
#
readonly dir_tmp_stimer=/tmp/.stimer

declare -A stimer

declare stimer_interval=${__STIMER_INTERVAL__:-10}
declare stimer_seq=0
declare stimer_log_line=0
declare stimer_log_max=${__STIMER_LOG_MAX__:-10000}
declare stimer_log_del=${__STIMER_LOG_DEL__:-1000}

stimer_echo_logger() {
	echo_logger stimer "$@"
}

set_stimer_field() {
	set_struct_field stimer "$@"
}

get_stimer_field() {
	echo $(get_struct_field stimer "$@")
}

#
#$1:type
#$2:event
#
stimer_log_file() {
	local type="$1"
	local event="$2"

	echo ${__STIMER_LOG__:-${dir_tmp_stimer}/.${type}.${event}.log}
}

readonly stimer_head="alias delay interval consume limit times command"
#
#$1:type
#$2:event
#
stimer_log_init() {
	local type="$1"
	local event="$2"; shift 2

	echo "#time seq ${stimer_head}" > $(stimer_log_file ${type} ${event})
}

#
#$1:type
#$2:event
#$3:info...
#
stimer_log() {
	local type="$1"
	local event="$2"; shift 2

	local file=$(stimer_log_file ${type} ${event})
	local seq=$((stimer_seq * stimer_interval))
	echo "$(getnow) ${seq} $@" >> ${file}

	#
	# limit log
	#
	if ((++stimer_log_line > stimer_log_max)); then
		((stimer_log_line -= stimer_log_del))

		sed -i "2,${stimer_log_del}d" ${file} &> /dev/null
	fi
}

#
#$1:type
#$2:event
#
stimer_show_file() {
	local type="$1"
	local event="$2"

	echo ${__STIMER_SHOW__:-${dir_tmp_stimer}/.${type}.${event}.show}
}

#
#$1:type
#$2:event
#
stimer_show_init() {
	local type="$1"
	local event="$2"; shift 2

	echo "#${stimer_head}" > $(stimer_show_file ${type} ${event})
}

#
#$1:type
#$2:event
#$3:info...
#
stimer_show_update() {
	local type="$1"
	local event="$2"; shift 2

	echo "$@" >> $(stimer_show_file ${type} ${event})
}

#
#$1:type
#$2:event
#$3:config
#
stimer_load() {
	local type="$1"
	local event="$2"
	local config="$3"

	if [[ ! -f "${config}" ]]; then
		stimer_echo_logger "no found ${config}"

		return ${e_noexist}
	fi

	#
	# on apboard(openwrt), cann't use as below
	#
	# while read xxx; do
	#   ......
	# done < <(...)
	#
	local tmp=${dir_tmp_stimer}/${type}/${event}.tmp
	sed '/#/d;/^$/d' ${config} > ${tmp}

	local alias delay interval limit command
	while read alias delay interval limit command; do
		#
		# 1. circle timer
		#       delay=*, interval>0, limit=*
		# 2. once timer
		#       delay>0, interval=0, limit=*
		#
		if ((limit < 0 || delay < 0 || interval < 0 || (0==delay && 0==interval) )); then
			stimer_echo_logger "SKIP:${info[@]}"
			continue
		fi

		local key=${type}_${event}_${alias}
		set_stimer_field ${key} alias ${alias}
		set_stimer_field ${key} delay ${delay}
		set_stimer_field ${key} interval ${interval}
		set_stimer_field ${key} consume $((0 - delay))
		set_stimer_field ${key} limit ${limit}
		set_stimer_field ${key} times 0
		set_stimer_field ${key} command ${command}

		stimer[${key}]=ok
	done < ${tmp}

	rm -f ${tmp}
}

#
#$1:type
#$2:event
#
stimer_trigger() {
	local type="$1"
	local event="$2"
	local info
	local key

	stimer_show_init ${type} ${event}

	for key in "${!stimer[@]}"; do
		local alias=$(get_stimer_field ${key} alias)
		local delay=$(get_stimer_field ${key} delay)
		local interval=$(get_stimer_field ${key} interval)
		local consume=$(get_stimer_field ${key} consume)
		local limit=$(get_stimer_field ${key} limit)
		local times=$(get_stimer_field ${key} times)
		local command=$(get_stimer_field ${key} command)

		info=$(list_cons ${alias} ${delay} \
					${interval} ${consume} \
					${limit} ${times} \
					${command})
		stimer_show_update ${type} ${event} ${info}

		set_stimer_field ${key} consume $((consume += stimer_interval))
		if ((consume < interval)); then
			continue
		fi

		set_stimer_field ${key} times $((++times))
		#
		# exec command
		#
		eval "${command} &"

		info=$(list_cons ${alias} ${delay} \
					${interval} ${consume} \
					${limit} ${times} \
					${command})
		stimer_log ${type} ${event} "${info}"

		#
		# 1. circle timer
		#       delay=*, interval>0, limit=*
		# 2. once timer
		#       delay>0, interval=0, limit=*
		#
		# once timer or limit exceeded
		#
		if ((0==interval || (limit > 0 && times >= limit))); then
			struct_delete stimer ${key}
			unset stimer[${key}]
		else
			set_stimer_field ${key} consume 0
		fi
	done
}

#
#$1:type
#$2:event
#
stimer_start() {
	local type=${__STIMER_TYPE__:-$1}
	local event=${__STIMER_EVENT__:-$2}

	MKDIR ${dir_tmp_stimer}/${type}
	stimer_log_init ${type} ${event}

	stimer_load ${type} ${event} ${dir_stimer}/${type}/$(get_board_type).${event}
	stimer_load ${type} ${event} ${dir_tmp_stimer}/${type}/${event}

	for ((stimer_seq=0;;stimer_seq++)); do
		stimer_trigger ${type} ${event}

		sleep ${stimer_interval}
	done
}

#
#$1:type
#$2:event
#$3:alias
#$4:delay
#$5:interval
#$6:limit
#$7:command...
#
stimer_custom() {
	local type="$1"
	local event="$2"; shift 2
	local alias="$1"

	MKDIR ${dir_tmp_stimer}/${type}

	local file=${dir_tmp_stimer}/${type}/${event}
	if [[ -f "${file}" ]]; then
		sed -i "/^${alias}/d" ${file}
	fi

	echo "$@" >> ${file}; fsync ${file}
}
