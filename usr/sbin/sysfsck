#!/bin/bash

. ${__ROOTFS__}/etc/upgrade/rsync.in

fscheck_echo_logger() {
	echo_logger "fscheck" "$@"
}

#
#$1:dir
#$2:file
#
get_sysfsck_file() {
	local dir=$1
	local file=$2

	echo ${dir}/etc/sysfsck/${file}
}

#
#$1:dir
#$2:type
#
fscheck_count() {
	local dir=$1
	local type=$2
	local err=0
	local count1
	local count2

	#
	#check files all
	#
	count1=$(find ${dir} -type ${type} | wc -l); err=$?
	if ((0!=err)); then
		fscheck_echo_logger "ERROR[${err}]: get files count"

		return ${err}
	fi

	local file=$(get_sysfsck_file ${dir} ${type})
	count2=$(cat ${file} | wc -l); err=$?
	if ((0!=err)); then
		fscheck_echo_logger "ERROR[${err}]: get ${file}'s line count"

		return ${err}
	fi

	if ((count1 != count2)); then
		fscheck_echo_logger "ERROR: count1:${count1} != count2:${count2}"

		return ${e_sysfsck_count}
	fi
}

#
#$1:dir
#
fscheck_d() {
	local dir=$1
	local file
	local err=0

	pushd ${dir} > /dev/null
	while read file; do
		if [[ ! -d "${file}" ]]; then
			fscheck_echo_logger "ERROR: ${file} not exist"

			err=${e_noexist}
			break
		fi
	done < $(get_sysfsck_file ${dir} d)
	popd > /dev/null

	return ${err}
}

#
#$1:dir
#
fscheck_c() {
	local dir=$1
	local file
	local err=0

	pushd ${dir} > /dev/null
	while read file; do
		if [[ ! -c "${file}" ]]; then
			fscheck_echo_logger "ERROR: ${file} not exist"

			err=${e_noexist}
			break
		fi
	done < $(get_sysfsck_file ${dir} c)
	popd > /dev/null

	return ${err}
}


#
#$1:dir
#
fscheck_f() {
	local dir=$1
	local file
	local md5
	local fmd5
	local err=0

	pushd ${dir} > /dev/null
	while read md5 file; do
		fmd5=$(md5sum ${file}); err=$?
		if ((0!=err)); then
			fscheck_echo_logger "ERROR: make ${file} md5"

			break
		elif [ "${md5}" != "${fmd5}" ]; then
			fscheck_echo_logger "ERROR: ${file} md5:${md5} != fmd5:${fmd5}"

			err=${e_sysfsck_md5}
			break
		fi
	done < $(get_sysfsck_file ${dir} f)
	popd > /dev/null

	return ${err}
}

#
#$1:dir
#
fscheck() {
	local dir=$1
	local err=0
	local list="c d f"
	local type

	for type in ${list}; do
		fscheck_count ${dir} ${type} || return $?
		fscheck_${type} ${dir} || return $?
	done
}

#
#$1:rootfs idx or rsync version
#
main() {
	local idx=$1
	local version=$1 #yes, is $1
	local dir

	if [[ "${idx}" == "$(rootfs_current)" ]]; then
		dir=/
	else
		case ${idx} in
		0|1|2)
			dir=$(rootfs_dir ${idx})
			;;
		*)
			version_check ${version} || {
				return ${e_bad_version}
			}

			dir=$(rsync_rootfs_dir ${version})
			;;
		esac
	fi

	#
	# todo: exclude /rootfsX /usb /hd /sd ...
	#
	fscheck ${dir} || return $?
}

main "$@"
